package views;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import mainFrame.DocToolbar;
import model.Document;
import model.Page;

public class DocumentViewer extends JPanel implements Observer {
	ArrayList<PageViewer> pageViewers = new ArrayList();
	Document document;

	JPanel panCentar = new JPanel();

	public DocumentViewer(Document aDocument) {
		super(new BorderLayout());
		this.document = aDocument;

		DocToolbar documentToolbar = new DocToolbar();
		add(documentToolbar, "North");

		this.panCentar.setBackground(Color.BLACK);
		JScrollPane sc = new JScrollPane(this.panCentar, 20, 30);

		add(sc);
	}

	public Document getDocument() {
		return this.document;
	}

	public void setDocument(Document document) {
		this.document = document;
	}

	@Override
	public void update(Observable o, Object arg) {
		this.panCentar.removeAll();

		this.panCentar.setLayout(new BoxLayout(panCentar, BoxLayout.Y_AXIS));
		for (PageViewer pageViewer : this.pageViewers) {
			pageViewer.setPreferredSize(new Dimension(200, 200));

			this.panCentar.add(pageViewer, "align center");
		}
		validate();
		repaint();
		for (PageViewer pageViewer : this.pageViewers) {
			pageViewer.update(null, null);
		}

	}

	public void addPageViewer(PageViewer pageViewer) {
		this.pageViewers.add(pageViewer);
		update(null, null);
		
	}
	public PageViewer getPageViewerForPage(Page page) {
		PageViewer pageViewer = null;
		for (PageViewer pageViewerTemp : this.pageViewers) {
			if (pageViewerTemp.getPage().equals(page)) {
				pageViewer = pageViewerTemp;
				break;
			}
		}
		return pageViewer;
	}
	 public void removePageViewerForPage(Page page)
	  {
	    PageViewer pageViewer = null;
	    for (PageViewer pageViewerTemp : this.pageViewers) {
	      if (pageViewerTemp.getPage().equals(page))
	      {
	        pageViewer = pageViewerTemp;
	        break;
	      }
	    }
	    if (pageViewer != null)
	    {
	      this.pageViewers.remove(pageViewer);
	      update(null, null);
	    }
	  }
	
	

}
