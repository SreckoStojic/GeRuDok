package model;

import java.io.File;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;

import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

public class Project extends Observable implements MutableTreeNode, Serializable {
	
	private ArrayList<Document> documents = new ArrayList();
	public String name;
	private Workspace parent;
	private File projectFile;


	public Project(String name, Workspace workspace) {

		this.name = name;
		this.parent = workspace;
	}

	public TreeNode getChildAt(int childIndex) {
		return (TreeNode) this.documents.get(childIndex);
	}

	public int getChildCount() {
		return this.documents.size();
	}

	public TreeNode getParent() {
		return this.parent;
	}

	public int getIndex(TreeNode node) {
		return 0;
	}

	public boolean getAllowsChildren() {
		return true;
	}

	public boolean isLeaf() {
		return this.documents.size() == 0;
	}

	public Enumeration children() {
		return null;
	}

	public void insert(MutableTreeNode child, int index) {
		this.documents.add(index, (Document) child);
		setChanged();
		notifyObservers(child);
		
	}

	public void remove(int index) {
	}

	public void remove(MutableTreeNode node) {
		this.documents.remove(node);
		setChanged();
		notifyObservers("removeDocument");
	}

	public void setUserObject(Object object) {
	}

	public void removeFromParent() {
	}

	public void setParent(MutableTreeNode newParent) {
	}

	public String toString() {
		return this.name;
	}
	
	public File getProjectFile() {
		return this.projectFile;
	}
	public void setProjectFile(File projectFile) {
		this.projectFile = projectFile;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	public ArrayList<Document> getChildren(){
	    return this.documents;
	}
	public Document getDocument(int index) {
		return documents.get(index);
	}

	

	
	
}
