package mainFrame;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.beans.PropertyVetoException;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.metal.DefaultMetalTheme;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.plaf.metal.OceanTheme;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

import model.Document;
import model.GraphSlot;
import model.Page;
import model.Project;
import model.TextSlot;
import model.Workspace;
import observers.GeRuDokEvent;
import views.DocumentViewer;
import views.ProjectViewer;
import views.TreeRendered;
import views.WorkspaceViewer;
import actions.ActionManager;

import command.CommandManager;

import elements.CircleElement;
import elements.RectangleElement;

public class MainFrame extends JFrame {

	private static MainFrame instance = null;
	private TreeWithListener tree;
	private JDesktopPane desktopPane;
	private CommandManager commandManager;
	private ActionManager actionManager;
	public static String LOOKANDFEEL = "Nimbus";
	public static String THEME = "Ocean";
	private MenuBar menubar;
	private ResourceBundle resourceBundle;
	private Workspace workspace;
	private StatusBar statusBar;
	//private JLabel langStatusBar, milos, srecko;

	private MainFrame() {

	}

	public static MainFrame getInstance() {
		if (instance == null) {
			instance = new MainFrame();
			instance.initialise();
		}

		return instance;
	}

	public void initialise() {

		Locale.setDefault(new Locale("en", "US"));
		resourceBundle = ResourceBundle.getBundle("language.MessageResources", Locale.getDefault());

		actionManager = new ActionManager();
		setSize(1000, 600);

		setTitle(MainFrame.getInstance().getResourceBundle().getString("titleName"));
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		Toolkit kit = Toolkit.getDefaultToolkit();
		Image icon = kit.getImage(getClass().getResource("/images/sg-icon.png"));
		setIconImage(icon);

		Workspace workspace = new Workspace();
		WorkspaceViewer workspaceViewer = new WorkspaceViewer(workspace);
		this.setWorkspace(workspace);

		this.tree = new TreeWithListener(workspace);

		this.desktopPane = new JDesktopPane();
		this.desktopPane = workspaceViewer;

		JScrollPane scrollPaneTree = new JScrollPane(this.tree);

		this.tree.setCellRenderer(new TreeRendered());
		initLookAndFeel();

		JPanel panLeft = new JPanel(new BorderLayout());
		panLeft.setPreferredSize(new Dimension(200, 100));
		panLeft.add(scrollPaneTree);

		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
				panLeft, desktopPane);

		JPanel panBottom = new JPanel();

		panBottom.setLayout(new BorderLayout());
		panBottom.setPreferredSize(new Dimension(100, 20));
		panBottom.setBackground(Color.LIGHT_GRAY);

		add(splitPane, BorderLayout.CENTER);
		add(panBottom, BorderLayout.SOUTH);

		MenuBar menu = new MenuBar();
		this.menubar=menu;

		setJMenuBar(menu);

		ToolBar toolbar = new ToolBar();
		toolbar.setBackground(Color.LIGHT_GRAY);
		add(toolbar, BorderLayout.NORTH);
		
	    statusBar = new StatusBar();
	    add(statusBar, "South");

	}

	public DocumentViewer getSelectedDocumentViewer() {
		DocumentViewer documentViewer = null;
		ProjectViewer projectViewer = (ProjectViewer) this.desktopPane
				.getSelectedFrame();
		documentViewer = (DocumentViewer) projectViewer.getDocumentsTab()
				.getSelectedComponent();

		return documentViewer;
	}

	public ProjectViewer selectInternalFrame(TreeNode Node) {
		ProjectViewer projectViewer = null;

		JInternalFrame[] frames = getInstance().getDesktopPane().getAllFrames();
		for (int i = 0; i < frames.length; i++) {
			projectViewer = (ProjectViewer) frames[i];
			Project project = projectViewer.getProject();
			if (project.equals((Project) Node)) {
				try {
					if (!frames[i].isVisible()) {

						frames[i].setVisible(true);
					}
					frames[i].setSelected(true);
				} catch (PropertyVetoException e) {
					e.printStackTrace();
				}
				break;
			}
		}
		return projectViewer;
	}

	

	public static void initLookAndFeel() {
		String lookAndFeel = null;

		if (LOOKANDFEEL != null) {
			if (LOOKANDFEEL.equals("Metal")) {
				lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName();

			}

			else if (LOOKANDFEEL.equals("Nimbus")) {
				try {

					for (LookAndFeelInfo info : UIManager
							.getInstalledLookAndFeels()) {

						if ("Nimbus".equals(info.getName())) {
							UIManager.setLookAndFeel(info.getClassName());
							break;
						}
					}
				} catch (Exception e) {

				}
			} else if (LOOKANDFEEL.equals("Windows")) {
				try {
					for (LookAndFeelInfo info : UIManager
							.getInstalledLookAndFeels()) {

						System.out.println(info.toString());
					}
					for (LookAndFeelInfo info : UIManager
							.getInstalledLookAndFeels()) {

						if ("Windows".equals(info.getName())) {
							UIManager.setLookAndFeel(info.getClassName());
							break;
						}
					}
				} catch (Exception e) {

				}
			}

			else if (LOOKANDFEEL.equals("Motif")) {
				lookAndFeel = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
			}

			else if (LOOKANDFEEL.equals("GTK")) {
				lookAndFeel = "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
			}

			else {
				System.err
						.println("Unexpected value of LOOKANDFEEL specified: "
								+ LOOKANDFEEL);
				lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName();
			}

			try {
				if (lookAndFeel == "") {
					try {
						UIManager.getSystemLookAndFeelClassName();
					} catch (Exception e) {
					}
				}

				if (LOOKANDFEEL.equals("Metal"))
					UIManager.setLookAndFeel(lookAndFeel);

				// If L&F = "Metal", set the theme

				if (LOOKANDFEEL.equals("Metal")) {
					if (THEME.equals("DefaultMetal"))
						MetalLookAndFeel
								.setCurrentTheme(new DefaultMetalTheme());
					else if (THEME.equals("Ocean"))
						MetalLookAndFeel.setCurrentTheme(new OceanTheme());

					UIManager.setLookAndFeel(new MetalLookAndFeel());
				}

			}

			catch (ClassNotFoundException e) {
				System.err
						.println("Couldn't find class for specified look and feel:"
								+ lookAndFeel);
				System.err
						.println("Did you include the L&F library in the class path?");
				System.err.println("Using the default look and feel.");
			}

			catch (UnsupportedLookAndFeelException e) {
				System.err.println("Can't use the specified look and feel ("
						+ lookAndFeel + ") on this platform.");
				System.err.println("Using the default look and feel.");
			}

			catch (Exception e) {
				System.err.println("Couldn't get specified look and feel ("
						+ lookAndFeel + "), for some reason.");
				System.err.println("Using the default look and feel.");
				e.printStackTrace();
			}
		}
		// SwingUtilities.updateComponentTreeUI(MainFrame.getInstance()
		// .getTree());

		MainFrame.getInstance().getDesktopPane().updateUI();
		((DefaultTreeModel) MainFrame.getInstance().getTree().getModel())
				.reload();

	}

	public void changeLanguage() {

		resourceBundle = ResourceBundle.getBundle(
				"language.MessageResources", Locale.getDefault());
		this.menubar.changeText();
		
	    for (int i=0;i<workspace.getChildCount();i++){
	    	Project p=(Project) workspace.getChildAt(i);
	    	p.setName(resourceBundle.getString("Project")+" "+(i+1));
	    	GeRuDokEvent gerDokEvent=new GeRuDokEvent(GeRuDokEvent.Language, p);
            workspace.changel(gerDokEvent); 	
	    	for (int j=0;j<p.getChildCount();j++){
	    		Document d=(Document) p.getChildAt(j);
	    		d.setName(resourceBundle.getString("Document")+" "+(j+1));
	    		Project pr=(Project) d.getParent();
	    		pr.changel(d);
	    		for (int k=0;k<d.getChildCount();k++){
	    			Page page=(Page) d.getChildAt(k);
	    			page.setName(resourceBundle.getString("Page")+" "+(k+1));
	    			Document doc=(Document) page.getParent();
	    			doc.changel(page);
	    			for (int l=0;l<page.getChildCount();l++){
	    				if (page.getChildAt(l) instanceof GraphSlot){
	    					GraphSlot graphSlot=(GraphSlot) page.getChildAt(l);
	    					graphSlot.setName(resourceBundle.getString("GraphSlot")+" "+(l+1));
	    					Page pagel=(Page) graphSlot.getParent();
	    					pagel.changelGraphSlot(graphSlot);
	    					for (int e=0;e<graphSlot.getChildCount();e++){
	    						if (graphSlot.getChildAt(e) instanceof CircleElement){
	    							CircleElement circle=(CircleElement) graphSlot.getChildAt(e);
	    							circle.setName(resourceBundle.getString("Circle")+" "+(e+1));
	    						}
	    						if (graphSlot.getChildAt(e) instanceof RectangleElement){
	    							RectangleElement recElement=(RectangleElement) graphSlot.getChildAt(e);
	    							recElement.setName(resourceBundle.getString("Rectangle")+" "+(e+1));
	    						}
	    					}
	    				}
	    				if (page.getChildAt(l) instanceof TextSlot){
	    					TextSlot textSlot=(TextSlot) page.getChildAt(l);
	    					textSlot.setName(resourceBundle.getString("TextSlot")+" "+(l+1));
	    					Page pagel=(Page)textSlot.getParent();
	    					pagel.changelTextSlot(textSlot);
	    				}
	    			}
	    			
	    		}
	    	}
	    }
	    
	statusBar.getLangStatusBar().setText(MainFrame.getInstance().getResourceBundle().getString("langStatusBar"));
	statusBar.getMilos().setText(MainFrame.getInstance().getResourceBundle().getString("milos"));
	statusBar.getSrecko().setText(MainFrame.getInstance().getResourceBundle().getString("srecko"));
	setTitle(MainFrame.getInstance().getResourceBundle().getString("titleName"));
	
	
	
	MainFrame.getInstance().getTree().updateUI();
		
		
	}

	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}

	public void setResourceBundle(ResourceBundle resourceBundle) {
		this.resourceBundle = resourceBundle;
	}

	public MenuBar getMenubar() {
		return menubar;
	}

	public void setMenubar(MenuBar menubar) {
		this.menubar = menubar;
	}

	public Workspace getWorkspace() {
		return workspace;
	}

	public void setWorkspace(Workspace workspace) {
		this.workspace = workspace;
	}

	public JDesktopPane getDesktopPane() {
		return desktopPane;
	}

	public void setDesktopPane(JDesktopPane desktopPane) {
		this.desktopPane = desktopPane;
	}

	public TreeWithListener getTree() {
		return tree;
	}

	public CommandManager getCommandManager() {
		return this.commandManager;
	}

	public ActionManager getActionManager() {
		return actionManager;
	}

	public void setActionManager(ActionManager actionmanager) {
		this.actionManager = actionmanager;
	}




}
