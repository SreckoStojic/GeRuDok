package model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;

import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

import state.StateManager;
import elements.Element;

public class GraphSlot extends Observable implements MutableTreeNode,
		Serializable {

	private String name;
	private Page parent;
	private ArrayList<Element> elements = new ArrayList<Element>();
	private StateManager stateManager = new StateManager(this);
	private boolean designMode = false;
	

	public GraphSlot(Page parent, String name) {
		this.parent = parent;
		this.name = name;

	}

	public TreeNode getChildAt(int childIndex) {
		return (TreeNode) this.elements.get(childIndex);
	}

	public int getChildCount() {
		return this.elements.size();
	}

	public TreeNode getParent() {
		return this.parent;
	}

	public int getIndex(TreeNode node) {
		return this.elements.indexOf(node);
	}

	public boolean getAllowsChildren() {
		return true;
	}

	public boolean isLeaf() {
		return this.elements.size() == 0;
	}

	public Enumeration children() {
		return null;
	}

	public void insert(MutableTreeNode child, int index) {
		this.elements.add(index, (Element) child);
		setChanged();
		notifyObservers();
	}

	public void addElement(Element element) {
		elements.add(element);
		setChanged();
		notifyObservers();

	}

	public void removeElement(Element element) {
		elements.remove(element);
		setChanged();
		notifyObservers();

	}

	

	public void remove(int index) {
	}

	public void remove(MutableTreeNode node) {
		this.elements.remove(node);
		setChanged();
		notifyObservers();
	}

	public void setUserObject(Object object) {
	}

	public void removeFromParent() {
	}

	public void setParent(MutableTreeNode newParent) {
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String toString() {
		return this.name;
	}

	public void startCircleState() {
		this.stateManager.setCircleState();
	}

	public void startRectangleState() {
		this.stateManager.setRectangleState();
	}

	public void startSelectState() {
		this.stateManager.setSelectState();
	}

	public StateManager getStateManager() {
		return this.stateManager;
	}

	public boolean isDesignMode() {
		return designMode;
	}

	public void setDesignMode(boolean designMode) {
		this.designMode = designMode;
		setChanged();
		notifyObservers();
		
	}

}
