package mainFrame;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.beans.PropertyVetoException;

import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;
import javax.swing.tree.TreeNode;

import model.Document;
import model.Project;
import model.Workspace;
import views.DocumentViewer;
import views.ProjectViewer;
import views.TreeRendered;
import Command.CommandManager;
import actions.ActionManager;
import actions.Redo;
import actions.Undo;

public class MainFrame extends JFrame {

	private static MainFrame instance = null;
	private TreeWithListener tree;
	private JDesktopPane desktopPane;
	private CommandManager commandManager;
	private Undo undo = new Undo();
	private Redo redo = new Redo();
	private ActionManager actionManager;
    
	

	private MainFrame() {

	}

	public static MainFrame getInstance() {
		if (instance == null) {
			instance = new MainFrame();
			instance.initialise();
		}

		return instance;
	}

	public void initialise() {
		/*
		 * try {
		 * UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		 * } catch (ClassNotFoundException | InstantiationException |
		 * IllegalAccessException | UnsupportedLookAndFeelException e) { // TODO
		 * Auto-generated catch block e.printStackTrace(); }
		 */
		actionManager=new ActionManager();
		setSize(1000, 600);

		setTitle("GeRuDok tim 9-6");
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		Toolkit kit = Toolkit.getDefaultToolkit();
		Image icon = kit.getImage("images/sg-icon.png");
		setIconImage(icon);

		Workspace workspace = new Workspace();
		this.tree = new TreeWithListener(workspace);

		this.desktopPane = new JDesktopPane();

		JScrollPane scrollPaneTree = new JScrollPane(this.tree);

		this.tree.setCellRenderer(new TreeRendered());

		JPanel panLeft = new JPanel(new BorderLayout());
		panLeft.setPreferredSize(new Dimension(200, 100));
		panLeft.add(scrollPaneTree);


		//ImagePanel panel = new ImagePanel(new ImageIcon("images/sg-logo1.png").getImage());
		
		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,panLeft,desktopPane);
		JScrollPane scrollPane = new JScrollPane();

		JPanel panBottom = new JPanel();

		panBottom.setLayout(new BorderLayout());
		panBottom.setPreferredSize(new Dimension(100, 20));
		panBottom.setBackground(Color.LIGHT_GRAY);

		// status bar

		JLabel lbl1 = new JLabel("TIM 9-6", SwingConstants.CENTER);
		lbl1.setPreferredSize(new Dimension(300, 100));
		lbl1.setBorder(new LineBorder(Color.BLACK));
		panBottom.add(lbl1, BorderLayout.WEST);

		JLabel lbl2 = new JLabel("Milos Gagovic (C)", SwingConstants.CENTER);
		lbl2.setSize(10, 100);
		lbl2.setBorder(new LineBorder(Color.BLACK));
		panBottom.add(lbl2, BorderLayout.CENTER);

		JLabel lbl3 = new JLabel("Srecko Stojic", SwingConstants.CENTER);
		lbl3.setPreferredSize(new Dimension(300, 100));
		lbl3.setBorder(new LineBorder(Color.BLACK));
		panBottom.add(lbl3, BorderLayout.EAST);

		//

		add(splitPane, BorderLayout.CENTER);
		add(panBottom, BorderLayout.SOUTH);

		MenuBar menu = new MenuBar();
		setJMenuBar(menu);

		ToolBar toolbar = new ToolBar();
		toolbar.setBackground(Color.LIGHT_GRAY);
		add(toolbar, BorderLayout.NORTH);
		//undo.setEnabled(false);
	   // redo.setEnabled(false);

		setVisible(true);
		
		

	}

	public Document getSelectedDocument() {
		ProjectViewer projectViewer = (ProjectViewer) this.desktopPane
				.getSelectedFrame();
		DocumentViewer documentViewer = (DocumentViewer) projectViewer
				.getDocumentsTab().getSelectedComponent();

		return documentViewer.getDocument();
	}

	public DocumentViewer getSelectedDocumentViewer() {
		DocumentViewer documentViewer = null;
		ProjectViewer projectViewer = (ProjectViewer) this.desktopPane
				.getSelectedFrame();
		documentViewer = (DocumentViewer) projectViewer.getDocumentsTab()
				.getSelectedComponent();

		return documentViewer;
	}

	public ProjectViewer selectInternalFrame(TreeNode Node) {
		ProjectViewer projectViewer = null;

		JInternalFrame[] frames = getInstance().getDesktopPane().getAllFrames();
		for (int i = 0; i < frames.length; i++) {
			projectViewer = (ProjectViewer) frames[i];
			Project project = projectViewer.getProject();
			if (project.equals((Project) Node)) {
				try {
					if (!frames[i].isVisible()){
						
						frames[i].setVisible(true);
					}
					frames[i].setSelected(true);
				} catch (PropertyVetoException e) {
					e.printStackTrace();
				}
				break;
			}
		}
		return projectViewer;
	}

	public JDesktopPane getDesktopPane() {
		return desktopPane;
	}

	public void setDesktopPane(JDesktopPane desktopPane) {
		this.desktopPane = desktopPane;
	}

	public TreeWithListener getTree() {
		return tree;
	}

	public Undo getUndo() {
		return undo;
	}

	public void setUndo(Undo undo) {
		this.undo = undo;
	}

	public Redo getRedo() {
		return redo;
	}

	public void setRedo(Redo redo) {
		this.redo = redo;
	}
	
	public CommandManager getCommandManager() {
	    return this.commandManager;
	  }

	public ActionManager getActionManager() {
		return actionManager;
	}

	public void setActionManager(ActionManager actionmanager) {
		this.actionManager = actionmanager;
	}
	
	

}
