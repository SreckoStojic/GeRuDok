package dialogs;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Dimension2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JDialog;
import javax.swing.JPanel;

import mainFrame.MainFrame;
import mainFrame.SlotToolbar;
import model.GraphSlot;
import elements.Element;

public class GraphSlotContentViewer extends JDialog implements Observer {
	private GraphSlot slot;
	static final int handleSize = 7;

	public static enum Handle {
		North, South, East, West, SouthEast, SouthWest, NorthEast, NorthWest;
	}

	public GraphSlotContentViewer(GraphSlot slot) {
		this.slot = slot;
		this.slot.addObserver(this);
		this.slot.getSelectionModel().addObserver(this);
		setTitle(slot.toString());
		setSize(new Dimension(500, 500));
		setLocationRelativeTo(MainFrame.getInstance());
		setModal(true);

		SlotViewerFramework slotViewerFramework = new SlotViewerFramework();
		slotViewerFramework.setBackground(Color.WHITE);
		add(slotViewerFramework, "Center");
		SlotViewerController slotViewerController = new SlotViewerController();
		slotViewerFramework.addMouseListener(slotViewerController);
		slotViewerFramework.addMouseMotionListener(slotViewerController);

		SlotToolbar slotToolbar = new SlotToolbar(slot);
		add(slotToolbar, "North");
		// addWindowListener(new WindowControllerGraph());
	}

	class SlotViewerFramework extends JPanel {

		SlotViewerFramework() {
		}

		protected void paintComponent(Graphics g) {
			super.paintComponent(g);

			setCursor(new Cursor(Cursor.HAND_CURSOR));

			Graphics2D g2 = (Graphics2D) g;
			for (int i = 0; i < slot.getChildCount(); i++) {
				Element element = (Element) slot.getChildAt(i);
				g2.setColor(Color.BLACK);

				g2.setStroke(element.getStroke());
				g2.draw(element.getShape());
				g2.setPaint(element.getPaint());
				g2.fill(element.getShape());
			}
			GraphSlotContentViewer.this.paintSelectionHandles(g2); // metoda
																	// koja
																	// poziva
																	// iscrtavanje
																	// handlova
																	// na svaki
																	// repaint

			g2.setColor(Color.BLACK);
			g2.setStroke(new BasicStroke(1.0F, 2, 2, 1.0F, new float[] { 3.0F,
					6.0F }, 0.0F));
			g2.draw(GraphSlotContentViewer.this.slot.getSelectionModel()
					.getSelectionRectangle());

		}
	}

	class SlotViewerController extends MouseAdapter {
		SlotViewerController() {
		}

		public void mousePressed(MouseEvent e) {
			GraphSlotContentViewer.this.slot.getSelectionModel()
					.setLastPosition(e.getPoint());
			
			GraphSlotContentViewer.this.slot.getStateManager()
					.getCurrentState().mousePressed(e);

		}

		public void mouseReleased(MouseEvent e) {
			GraphSlotContentViewer.this.slot.getStateManager()
					.getCurrentState().mouseReleased(e);
		}

		public void mouseDragged(MouseEvent e) {
			GraphSlotContentViewer.this.slot.getStateManager()
					.getCurrentState().mouseDragged(e);
		}

	}

	public void update(Observable o, Object arg) {
		repaint();
	}

	private void paintSelectionHandle(Graphics2D g2, Point2D position) {
		double size = 7.0D;
		g2.fill(new Rectangle2D.Double(position.getX() - size / 2.0D, position
				.getY() - size / 2.0D, size, size));
	}

	private void paintSelectionHandles(Graphics2D g2) {
		Iterator<Element> it = this.slot.getSelectionModel()
				.getSelectionListIterator();
		int j;
		int i;
		while (it.hasNext()) {
			Element element = (Element) it.next();

			g2.setStroke(new BasicStroke(1.0F, 2, 2, 1.0F, new float[] { 3.0F,
					6.0F }, 0.0F));
			g2.setPaint(Color.BLUE);

			g2.drawRect((int) element.getPosition().getX(), (int) element
					.getPosition().getY(), (int) element.getDimension()
					.getWidth(), (int) element.getDimension().getHeight());

			Handle[] arrayOfHandle;
			j = (arrayOfHandle = Handle.values()).length;
			i = 0;
			for (i = 0; i < j; i++) {

				Handle e = arrayOfHandle[i];
				paintSelectionHandle(
						g2,
						getHandlePoint(element.getPosition(),
								element.getDimension(), e));
			}

		}
	}

	private Point2D getHandlePoint(Point2D topLeft, Dimension2D size,
			Handle handlePosition) {
		double x = 0.0D;
		double y = 0.0D;
		if ((handlePosition == Handle.NorthWest)
				|| (handlePosition == Handle.North)
				|| (handlePosition == Handle.NorthEast)) {
			y = topLeft.getY();
		}
		if ((handlePosition == Handle.East) || (handlePosition == Handle.West)) {
			y = topLeft.getY() + size.getHeight() / 2.0D;
		}
		if ((handlePosition == Handle.SouthWest)
				|| (handlePosition == Handle.South)
				|| (handlePosition == Handle.SouthEast)) {
			y = topLeft.getY() + size.getHeight();
		}
		if ((handlePosition == Handle.NorthWest)
				|| (handlePosition == Handle.West)
				|| (handlePosition == Handle.SouthWest)) {
			x = topLeft.getX();
		}
		if ((handlePosition == Handle.North)
				|| (handlePosition == Handle.South)) {
			x = topLeft.getX() + size.getWidth() / 2.0D;
		}
		if ((handlePosition == Handle.NorthEast)
				|| (handlePosition == Handle.East)
				|| (handlePosition == Handle.SouthEast)) {
			x = topLeft.getX() + size.getWidth();
		}
		return new Point2D.Double(x, y);
	}
	/*
	 * class WindowControllerGraph extends WindowAdapter {
	 * 
	 * public void windowClosing(WindowEvent e) { DocumentViewer documentviewer
	 * = MainFrame.getInstance() .getSelectedDocumentViewer();
	 * 
	 * Page page = (Page) slot.getParent(); PageViewer pageviewer =
	 * documentviewer.getPageViewerForPage(page); GraphSlotViewer gra =
	 * pageviewer.getGraphSlotViewerForslot(slot);
	 * gra.getGraphSlot().setDesignMode(false);
	 * 
	 * } }
	 */

}
