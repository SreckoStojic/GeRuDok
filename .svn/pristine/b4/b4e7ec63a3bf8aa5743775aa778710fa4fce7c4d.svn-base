package model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Observable;

import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

public class Workspace extends Observable implements MutableTreeNode, Serializable {
	private ArrayList<Project> projects = new ArrayList();
	

	public TreeNode getChildAt(int childIndex) {
		return (TreeNode) this.projects.get(childIndex);
	}

	public int getChildCount() {
		return this.projects.size();
	}

	public TreeNode getParent() {
		return null;
	}

	public int getIndex(TreeNode node) {
		return 0;
	}

	public boolean getAllowsChildren() {
		return true;
	}

	public boolean isLeaf() {
		return false;
	}

	public Enumeration children() {
		return null;
	}

	public void insert(MutableTreeNode child, int index) {
		this.projects.add(index, (Project) child);
		setChanged();
		notifyObservers(child);
	}

	public void remove(int index) {
	}

	public void remove(MutableTreeNode node) {
		this.projects.remove(node);
	}

	public void setUserObject(Object object) {
	}

	public void removeFromParent() {
	}

	public void setParent(MutableTreeNode newParent) {
	}

	public String toString() {
		return "workspace";
	}
	
	public ArrayList<Project> getProjects() {
	    return this.projects;
	}
	
	
	
}
