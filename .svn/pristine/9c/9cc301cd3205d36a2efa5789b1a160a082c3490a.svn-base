package views;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JTabbedPane;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import mainFrame.MainFrame;
import model.Document;
import model.Project;
import model.Workspace;

public class ProjectViewer extends JInternalFrame implements Observer {
	private JTabbedPane documentsTab = new JTabbedPane();
	private Project project;
	public static int brProj = 0;
	private ArrayList<DocumentViewer> documentViewers = new ArrayList();

	public ProjectViewer(Project project) {
		super(project.toString(), true, true, true, true);
		this.project = project;
		project.addObserver(this);

		ImageIcon image = new ImageIcon("images/new-project.png");
		setFrameIcon(image);

		setSize(new Dimension(400, 400));
		setLocation(brProj * 25, brProj * 25);

		setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
		add(this.documentsTab);

		brProj++;

		setVisible(true);

		addInternalFrameListener(new InternalFrameListener() {

			@Override
			public void internalFrameOpened(InternalFrameEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void internalFrameIconified(InternalFrameEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void internalFrameDeiconified(InternalFrameEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void internalFrameDeactivated(InternalFrameEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void internalFrameClosing(InternalFrameEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void internalFrameClosed(InternalFrameEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void internalFrameActivated(InternalFrameEvent e) {

				Object[] path = new Object[2];
				path[0] = project.getParent();
				path[1] = project;
				TreePath treePath = new TreePath(path);

				MainFrame.getInstance().getTree().setSelectionPath(treePath);

			}
		});
	}

	public void update(Observable o, Object arg) {
		Document document = (Document) arg;
		DocumentViewer documentViewer = new DocumentViewer(document);

		this.documentViewers.add(documentViewer);
		this.documentsTab.add(documentViewer, documentViewer.getDocument()
				.toString());

		this.documentsTab.setSelectedIndex(this.documentsTab
				.getComponentCount() - 1);
	}

	public JTabbedPane getDocumentsTab() {
		return this.documentsTab;
	}

	public Project getProject() {
		return this.project;
	}

	public void setProject(Project project) {
		this.project = project;
	}

	public DocumentViewer getDocumentViewerForDocument(Document document) {
		DocumentViewer documentViewer = null;
		for (DocumentViewer documentViewerTemp : this.documentViewers) {
			if (documentViewerTemp.getDocument().equals(document)) {
				documentViewer = documentViewerTemp;
				break;
			}
		}
		return documentViewer;
	}

	public DocumentViewer setDocumentTab(TreeNode selectedNode) {
		DocumentViewer documentViewer = null;
		for (int i = 0; i < this.documentsTab.getComponentCount(); i++) {
			documentViewer = (DocumentViewer) this.documentsTab.getComponent(i);
			Document document = documentViewer.getDocument();
			if (document.equals((Document) selectedNode)) {
				this.documentsTab.setSelectedIndex(i);
				break;
			}
		}
		return documentViewer;
	}

	public void removeDocumentViewer(Document document) {
		DocumentViewer docViewer = null;
		for (DocumentViewer documentTemp : this.documentViewers) {
			if (documentTemp.getDocument().equals(document)) {
				docViewer = documentTemp;
				break;
			}
		}
		if (docViewer != null) {
			this.documentsTab.remove(docViewer);
			this.documentViewers.remove(docViewer);
			//update(null, null);
		}
	}
	public void addDocumentViewer(DocumentViewer documentViewer) {
		this.documentViewers.add(documentViewer);
		update(null, null);
		
	}

}
